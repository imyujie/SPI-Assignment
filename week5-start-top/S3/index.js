// Generated by LiveScript 1.3.1
(function(){
  var Button, Bubble, CircleMenu, Robot;
  Button = (function(){
    Button.displayName = 'Button';
    var prototype = Button.prototype, constructor = Button;
    Button.status = 'idle';
    function Button(btn, callback){
      this.btn = btn;
      this.callback = callback;
      this.redDot = this.btn.find('.unread');
      this.setState('init');
      this.addListener();
    }
    prototype.addListener = function(){
      var this$ = this;
      this.btn.on('click', function(e){
        this$.setState('waiting');
        constructor.status = 'busy';
        this$.jqXHR = $.get('/?timestamp=' + new Date().getTime()).done(function(data){
          data = +data;
          this$.redDot.text(data);
          this$.setState('done');
          constructor.status = 'idle';
          this$.callback(data);
        });
      });
    };
    prototype.getNumber = function(){
      return +this.redDot.text();
    };
    prototype.getState = function(){
      return this.state;
    };
    prototype.setState = function(st){
      this.state = st;
      if (this.state === 'init') {
        this.btn.removeClass('disabled');
        return this.redDot.removeClass('visible');
      } else if (this.state === 'waiting') {
        this.btn.addClass('disabled');
        return this.redDot.text('...').addClass('visible');
      } else {
        this.btn.addClass('disabled');
        return this.redDot.addClass('visible');
      }
    };
    prototype.reset = function(){
      var ref$;
      this.setState('init');
      if ((ref$ = this.jqXHR) != null) {
        ref$.abort();
      }
      constructor.status = 'idle';
    };
    return Button;
  }());
  Bubble = (function(){
    Bubble.displayName = 'Bubble';
    var prototype = Bubble.prototype, constructor = Bubble;
    function Bubble(btn, callback){
      this.btn = btn;
      this.callback = callback;
      this.setState('disabled');
      this.addListener();
    }
    prototype.addListener = function(){
      var this$ = this;
      this.btn.on('click', function(e){
        if (this$.getState() === 'ready') {
          this$.callback(this$.btn);
          this$.setState('sumed');
        }
      });
    };
    prototype.showMessage = function(msg){
      this.btn.text(msg);
    };
    prototype.getState = function(){
      return this.state;
    };
    prototype.setState = function(st){
      switch (false) {
      case st !== 'init':
        this.btn.text('').addClass('disabled');
        break;
      case st !== 'ready':
        this.btn.removeClass('disabled');
        break;
      default:
        this.btn.addClass('disabled');
      }
      this.state = st;
    };
    prototype.reset = function(){
      this.setState('init');
    };
    return Bubble;
  }());
  CircleMenu = (function(){
    CircleMenu.displayName = 'CircleMenu';
    var prototype = CircleMenu.prototype, constructor = CircleMenu;
    function CircleMenu(options){
      var func, i$, ref$, len$, item, this$ = this;
      this.options = options;
      this.sum = 0;
      this.buttons = [];
      func = arguments[1];
      this.bubble = new Bubble(this.options.bigBtn, function(btn){
        btn.text(this$.sum);
      });
      for (i$ = 0, len$ = (ref$ = this.options.smallBtns).length; i$ < len$; ++i$) {
        item = ref$[i$];
        this.buttons.push(new Button($(item), fn$));
      }
      this.wholeArea = this.options.wholeArea;
      this.addListener();
      function fn$(number){
        this$.sum += number;
        if (this$.checkAbleToSum()) {
          this$.bubble.setState('ready');
          this$.bubble.btn.click();
        }
      }
    }
    prototype.addListener = function(){
      var this$ = this;
      this.wholeArea.on('mouseleave', function(e){
        this$.resetAll();
      });
    };
    prototype.resetAll = function(){
      var i$, ref$, len$, item;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        item = ref$[i$];
        item.reset();
      }
      this.bubble.reset();
      this.sum = 0;
      if ((ref$ = this.options.robot) != null) {
        ref$.reset();
      }
    };
    prototype.checkAbleToSum = function(){
      var i$, ref$, len$, item;
      for (i$ = 0, len$ = (ref$ = this.buttons).length; i$ < len$; ++i$) {
        item = ref$[i$];
        if (item.getState() !== 'done') {
          return false;
        }
      }
      return true;
    };
    prototype.makeSmallBtnsArray = function(btns){
      var i$, len$, item, results$ = [];
      for (i$ = 0, len$ = btns.length; i$ < len$; ++i$) {
        item = btns[i$];
        results$.push({
          btn: $(item, {
            red: $(item)
          }).find('.unread')
        });
      }
      return results$;
    };
    return CircleMenu;
  }());
  Robot = (function(){
    Robot.displayName = 'Robot';
    var prototype = Robot.prototype, constructor = Robot;
    Robot.orderLetter = ["A", "B", "C", "D", "E"];
    Robot.orderNumber = [0, 1, 2, 3, 4];
    Robot.shuffle = function(){
      return this.orderNumber.sort(function(a, b){
        return Math.random() - 0.5;
      });
    };
    function Robot(opts){
      this.opts = opts;
      this.addListener();
      this.current = 0;
      this.activate = false;
    }
    prototype.addListener = function(){
      var this$ = this;
      this.opts.btn.on('click', function(e){
        if (this$.state !== 'busy') {
          this$.clickAll();
          this$.state = 'busy';
        }
      });
    };
    prototype.clickAll = function(){
      var i$, ref$, len$, item;
      for (i$ = 0, len$ = (ref$ = this.opts.buttons).length; i$ < len$; ++i$) {
        item = ref$[i$];
        $(item).click();
      }
    };
    prototype.clickBubble = function(){
      this.opts.bubble.click();
    };
    prototype.reset = function(){
      this.current = 0;
      this.state = 'idle';
      this.activate = false;
    };
    return Robot;
  }());
  $(function(){
    var opts, rob, cm;
    opts = {
      type: 'bingxing',
      btn: $('.apb'),
      bubble: $('#info-bar div'),
      buttons: $('#control-ring li')
    };
    rob = new Robot(opts);
    opts = {
      bigBtn: $('#info-bar div'),
      smallBtns: $('#control-ring li'),
      wholeArea: $('#at-plus-container'),
      robot: rob
    };
    cm = new CircleMenu(opts);
  });
}).call(this);
